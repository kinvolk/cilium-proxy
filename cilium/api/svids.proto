syntax = "proto3";

package cilium;

import "envoy/service/discovery/v3/discovery.proto";

import "google/api/annotations.proto";

import "envoy/annotations/resource.proto";

// Each resource name a endpoint identity in decimal, e.g. `123`.
service SVIDDiscoveryService {
  option (envoy.annotations.resource).type = "cilium.SVIDs";

  rpc StreamSVIDs(
      stream envoy.service.discovery.v3.DiscoveryRequest)
      returns (stream envoy.service.discovery.v3.DiscoveryResponse) {}

  rpc FetchSVIDs(envoy.service.discovery.v3.DiscoveryRequest)
      returns (envoy.service.discovery.v3.DiscoveryResponse) {
    option (google.api.http) = {
      post: "/v2/discovery:svids"
      body: "*"
    };
  }
}

// The mapping of an endpoint identity to SVIDs.
message SVIDs {
  // Endpoint's identity.
  uint64 identity = 1;

  // Set of SVIDs assocaited to that identity
  repeated X509SVID svids = 2;
}

// copied from https://github.com/spiffe/go-spiffe/blob/main/v2/proto/spiffe/workload/workload.proto
// The X509SVID message carries a single SVID and all associated
// information, including CA bundles.
message X509SVID {
    // The SPIFFE ID of the SVID in this entry
    string spiffe_id = 1;

    // ASN.1 DER encoded certificate chain. MAY include intermediates,
    // the leaf certificate (or SVID itself) MUST come first.
    bytes x509_svid = 2;

    // ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
    bytes x509_svid_key = 3;

    // CA certificates belonging to the Trust Domain
    // ASN.1 DER encoded
    bytes bundle = 4;
}
